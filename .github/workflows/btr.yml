name: Build, Test, Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: protov3
  AWS_ROLE_NAME: GitHubActionsDeployRole   # role must exist + have trust policy

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write       # needed for OIDC
      packages: write       # push to ECR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # DEBUG BLOCK â€“ remove when fixed
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Dump OIDC token claims
        id: jwt
        uses: actions/github-script@v7
        with:
          script: |
            const token   = await core.getIDToken('sts.amazonaws.com')
            const [, pay] = token.split('.')
            const claims  = JSON.parse(Buffer.from(pay, 'base64').toString())
            console.log('ðŸ”‘ OIDC claims:\n' + JSON.stringify(claims, null, 2))
            core.setOutput('token', token)

      - name: Dry-run AssumeRoleWithWebIdentity
        if: always()     # run even if the dump step fails
        env:
          TOKEN: ${{ steps.jwt.outputs.token }}
        run: |
          set -x
          aws sts assume-role-with-web-identity \
            --role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${AWS_ROLE_NAME} \
            --role-session-name debug-run \
            --web-identity-token "$TOKEN" \
            --duration-seconds 900
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo '--- running pytest inside the container ---'
          docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG pytest
          echo '--- pushing image to ECR ---'
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Display ECR Image URL
        run: |
          echo "Image successfully pushed and tested."
          echo "Image URL: ${{ needs.build-and-test.outputs.image }}"
